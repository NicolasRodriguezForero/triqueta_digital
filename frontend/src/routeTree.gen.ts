/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as PerfilImport } from './routes/perfil'
import { Route as LoginImport } from './routes/login'
import { Route as ActividadesImport } from './routes/actividades'
import { Route as IndexImport } from './routes/index'
import { Route as AdminActividadesImport } from './routes/admin.actividades'
import { Route as ActividadesIdImport } from './routes/actividades.$id'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const PerfilRoute = PerfilImport.update({
  id: '/perfil',
  path: '/perfil',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ActividadesRoute = ActividadesImport.update({
  id: '/actividades',
  path: '/actividades',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AdminActividadesRoute = AdminActividadesImport.update({
  id: '/admin/actividades',
  path: '/admin/actividades',
  getParentRoute: () => rootRoute,
} as any)

const ActividadesIdRoute = ActividadesIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ActividadesRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/actividades': {
      id: '/actividades'
      path: '/actividades'
      fullPath: '/actividades'
      preLoaderRoute: typeof ActividadesImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/perfil': {
      id: '/perfil'
      path: '/perfil'
      fullPath: '/perfil'
      preLoaderRoute: typeof PerfilImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/actividades/$id': {
      id: '/actividades/$id'
      path: '/$id'
      fullPath: '/actividades/$id'
      preLoaderRoute: typeof ActividadesIdImport
      parentRoute: typeof ActividadesImport
    }
    '/admin/actividades': {
      id: '/admin/actividades'
      path: '/admin/actividades'
      fullPath: '/admin/actividades'
      preLoaderRoute: typeof AdminActividadesImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface ActividadesRouteChildren {
  ActividadesIdRoute: typeof ActividadesIdRoute
}

const ActividadesRouteChildren: ActividadesRouteChildren = {
  ActividadesIdRoute: ActividadesIdRoute,
}

const ActividadesRouteWithChildren = ActividadesRoute._addFileChildren(
  ActividadesRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/actividades': typeof ActividadesRouteWithChildren
  '/login': typeof LoginRoute
  '/perfil': typeof PerfilRoute
  '/register': typeof RegisterRoute
  '/actividades/$id': typeof ActividadesIdRoute
  '/admin/actividades': typeof AdminActividadesRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/actividades': typeof ActividadesRouteWithChildren
  '/login': typeof LoginRoute
  '/perfil': typeof PerfilRoute
  '/register': typeof RegisterRoute
  '/actividades/$id': typeof ActividadesIdRoute
  '/admin/actividades': typeof AdminActividadesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/actividades': typeof ActividadesRouteWithChildren
  '/login': typeof LoginRoute
  '/perfil': typeof PerfilRoute
  '/register': typeof RegisterRoute
  '/actividades/$id': typeof ActividadesIdRoute
  '/admin/actividades': typeof AdminActividadesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/actividades'
    | '/login'
    | '/perfil'
    | '/register'
    | '/actividades/$id'
    | '/admin/actividades'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/actividades'
    | '/login'
    | '/perfil'
    | '/register'
    | '/actividades/$id'
    | '/admin/actividades'
  id:
    | '__root__'
    | '/'
    | '/actividades'
    | '/login'
    | '/perfil'
    | '/register'
    | '/actividades/$id'
    | '/admin/actividades'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ActividadesRoute: typeof ActividadesRouteWithChildren
  LoginRoute: typeof LoginRoute
  PerfilRoute: typeof PerfilRoute
  RegisterRoute: typeof RegisterRoute
  AdminActividadesRoute: typeof AdminActividadesRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ActividadesRoute: ActividadesRouteWithChildren,
  LoginRoute: LoginRoute,
  PerfilRoute: PerfilRoute,
  RegisterRoute: RegisterRoute,
  AdminActividadesRoute: AdminActividadesRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/actividades",
        "/login",
        "/perfil",
        "/register",
        "/admin/actividades"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/actividades": {
      "filePath": "actividades.tsx",
      "children": [
        "/actividades/$id"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/perfil": {
      "filePath": "perfil.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/actividades/$id": {
      "filePath": "actividades.$id.tsx",
      "parent": "/actividades"
    },
    "/admin/actividades": {
      "filePath": "admin.actividades.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
